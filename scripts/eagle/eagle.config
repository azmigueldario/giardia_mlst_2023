params {
    // To avoid crashing jobs processing larger Giardia spp. genomes
    max_cpus = 4
    min_time = 120
    max_time = 600
}

process {
        // execute processes in slurm by default with following details
    executor = 'slurm'
    pollInterval = '60 sec'
    submitRateLimit = '12/60min'
        // maximum of 12 jobs running simultaneously
    queueSize = 15
    
        // Process specific for Giardia
    withLabel: 'assemble_genome' {
            // more memory as giardia's genome is larger
        memory = { meta.runtype == 'hybrid' || params.use_unicycler ? check_max((32.GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory') : check_max((8.GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
            // may also take longer to run than usual bacterial genome
        time = { meta.runtype == 'hybrid' ||  params.use_unicycler ? check_max( 2.h * task.attempt, (params.max_time).m, 'time' ) : check_max( 3.h * task.attempt, (params.max_time).m, 'time' )}
            // faster if more CPUS are allocated
        cpus = { check_max('request' * task.attempt, RESOURCES.MAX_CPUS, 'cpus' )}
    }
    
    withLabel: 'assembly_qc' {
            // assembly_qc should not take as much as 12h in submitter
        memory = {check_max(12.GB * task.attempt, RESOURCES.MAX_MEMORY, 'memory' )}
        time = {check_max( 4.h * task.attempt, (params.max_time).m , 'time' )}
    }
    
        // to prevent conflict between HPC and container Python interpreter and modules
    withLabel: 'minmer_sketch|minmer_query' {
        containerOptions = "-c --bind /project,/scratch" 
    }
}

singularity {
        // bind scratch as tmp for use in containers, it reports no space left without it
    runOptions = '--bind $APPTAINERENV_TMPDIR:/tmp,/project,/scratch'
    
        // allows access to bashrc variables
    envWhitelist = ['APPTAINERENV_TMPDIR']
    }