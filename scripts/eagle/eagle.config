params {
    // To avoid crashing jobs in Giardia Genome 
    max_cpus = 4
    min_time = 120
    max_time = 240
}

executor {
    // To use slurm without buggin everyone else down
    name = 'slurm' 
    pollInterval = '60 sec'
    submitRateLimit = '20/60min'
    queueSize = 100 
}

process {
        // Process specific for Giardia
        withLabel: 'assemble_genome' {
                // more memory as giardia's genome is larger
            memory = { meta.runtype == 'hybrid' || params.use_unicycler ? check_max((32.GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory') : check_max((16.GB * task.attempt), RESOURCES.MAX_MEMORY, 'memory')}
                // may also take longer to run than usual bacterial genome
            time = { meta.runtype == 'hybrid' ||  params.use_unicycler ? check_max( 2.h * task.attempt, (params.max_time).m, 'time' ) : check_max( (params.min_time).m * task.attempt, (params.max_time).m, 'time' )}
                // faster if more CPUS are allocated
            cpus = { check_max('request', RESOURCES.MAX_CPUS, 'cpus' )}
        }

        // to prevent conflict between HPC and container Python interpreter and modules
        withLabel: 'minmer_sketch|minmer_query' {
            containerOptions = "-c --bind /project,/scratch" 
        }
}